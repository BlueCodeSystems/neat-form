plugins {
  id 'jacoco'
  id 'com.android.library'
  id 'org.jetbrains.kotlin.android'
}

jacoco { toolVersion = '0.8.10' }

version = findProperty('VERSION_NAME') ?: "1.1.5"

android {
  namespace 'com.nerdstone.neatformcore'
  compileSdkVersion 35
  buildToolsVersion '35.0.0'

  defaultConfig {
    minSdk 21
    targetSdkVersion 35
    versionCode Integer.parseInt(project.findProperty('VERSION_CODE') ?: '1')
    versionName project.findProperty('VERSION_NAME') ?: version
    multiDexEnabled true
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    vectorDrawables { useSupportLibrary true }
  }

  buildFeatures { buildConfig true }

  // Keep Java 8 language level for Android bytecode; build uses JDK 17
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions { jvmTarget = JavaVersion.VERSION_1_8.toString() }

  lint { abortOnError false }

  buildTypes {
    debug { testCoverageEnabled true }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  packaging { resources { excludes += [
    'LICENSE.txt', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt',
    'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/INDEX.LIST'
  ] } }

  testOptions {
    unitTests {
      includeAndroidResources = true
      returnDefaultValues = true
      all {
        jacoco {
          includeNoLocationClasses = true
          excludes = ['jdk.internal.*']
        }
        jvmArgs(
          '--add-opens=java.base/java.lang=ALL-UNNAMED',
          '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
          '--add-opens=java.base/java.io=ALL-UNNAMED',
          '--add-opens=java.base/java.net=ALL-UNNAMED',
          '--add-opens=java.base/java.util=ALL-UNNAMED',
          '--add-opens=java.base/java.text=ALL-UNNAMED',
          '--add-opens=java.base/java.security=ALL-UNNAMED',
          '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED',
          '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED',
          '--add-opens=java.base/jdk.internal.util=ALL-UNNAMED',
          '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
          '--add-opens=java.base/sun.security.util=ALL-UNNAMED',
          '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED',
          '--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED'
        )
        systemProperty 'robolectric.dependency.repo.url', 'https://repo1.maven.org/maven2'
        systemProperty 'robolectric.enabledSdks', '28'
      }
    }
  }
}

tasks.withType(Test).configureEach {
  jacoco {
    includeNoLocationClasses = true
    excludes = ['jdk.internal.*']
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.24'
  implementation 'org.jetbrains.kotlin:kotlin-reflect:1.9.24'
  implementation 'androidx.multidex:multidex:2.0.1'
  implementation 'androidx.core:core-ktx:1.13.1'
  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation 'org.apache.commons:commons-text:1.10.0'
  implementation 'androidx.recyclerview:recyclerview:1.3.2'
  implementation 'com.google.android.material:material:1.12.0'
  implementation 'com.jakewharton.timber:timber:5.0.1'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'

  // Breaking changes from version 4.0+
  implementation 'org.jeasy:easy-rules-core:3.3.0'
  implementation 'org.jeasy:easy-rules-mvel:3.3.0'
  implementation 'com.google.code.gson:gson:2.9.0'
  implementation 'com.github.chivorns:smartmaterialspinner:1.2.1'
  implementation ('io.github.softmedtanzania:maskededittext:1.0.5') {
    transitive = true
    exclude group: 'androidx.appcompat', module: 'appcompat'
  }
  api('com.github.BlueCodeSystems:neat-stepper:v1.0.6') {
    transitive = true
    exclude group: 'androidx.appcompat', module: 'appcompat'
    exclude group: 'androidx.constraintlayout', module: 'constraintlayout'
  }

  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.robolectric:robolectric:4.10.3'
  debugImplementation 'androidx.fragment:fragment-testing:1.6.2'
  testImplementation 'androidx.test:core:1.5.0'
  testImplementation 'io.mockk:mockk:1.13.10'
  testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'

  androidTestImplementation 'androidx.test.ext:junit:1.1.5'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

repositories { mavenCentral() }

// Jacoco aggregated report
tasks.register('jacocoTestReport', JacocoReport) {
  dependsOn 'testDebugUnitTest'
  reports {
    xml.required = true; html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml")
    html.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/html")
  }
  def fileFilter = ['**/R.class','**/R$*.class','**/BuildConfig.*','**/Manifest*.*','**/*Test*.*','android/**/*.*','**/*$ViewBinder*.*']
  def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
  def mainSrc = "$project.projectDir/src/main/java"
  sourceDirectories.setFrom(files([mainSrc]))
  classDirectories.setFrom(files([debugTree]))
  executionData.setFrom(fileTree(dir: buildDir, includes: ['jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec']))
}


apply from: '../maven.gradle'
